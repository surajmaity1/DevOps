docker run -d mongo

docker network ls


https://hub.docker.com/_/mongo
https://hub.docker.com/_/mongo-express
https://docs.docker.com/engine/reference/commandline/exec/
http://localhost:3000/


docker run -d \
-p 27017:27017 \
-e MONGO_INITDB_ROOT_USERNAME=admin \
-e MONGO_INITDB_ROOT_PASSWORD=password \
--name mongodb \
--net mongo-network \
mongo



docker run -d \
-p 8081:8081 \
-e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
-e ME_CONFIG_MONGODB_ADMINPASSWORD=password \
--net mongo-network \
--name mongo-express \
-e ME_CONFIG_MONGODB_SERVER=mongodb \
mongo-express


# Run docker exec on a running container
docker run --name mycontainer -dit alpine /bin/sh

# creates a new file /home/workspace inside the running container
docker exec -d mycontainer touch /home/workspace

# Set environment variables for the exec process
docker exec -e MY_VAR_1="ONE" -e TEMP_VAR="END" mycontainer env

# By default docker exec command runs in the same working directory set when the container was created.
# We can specify an alternative working directory for the command to execute using the --workdir option (or the -w shorthand):
docker exec -it -w /home/workspace_dir mycontainer pwd

# Get Docker container id from container name
# -q for quiet. output only the ID
# -a for all. works even if your container is not running
# -f for filter.
docker ps -aqf "name=mycontainer"

# Create Custom image (check 'custom-mongo-image' folder)
docker build -t surajmaity1/custom-mongo:v1 .

# Run app inside a container and get output at specific port in your machine
docker run -t -i -p YOUR_MACHINE_PORT:PORT_DOCKER surajmaity1/app

